generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String  @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  accounts Account[]
  sessions Session[]
  Goal Goal[]
  Project Project[]
  Task Task[]
  Context Context[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String
  expires DateTime
  @@unique([identifier, token])
}

model Goal {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  dueDate DateTime
  color String?
  completed Boolean @default(false)
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  tasks Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastReview DateTime?
  reviewFrequencyDays Int?
}

model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  content String
  dueDate DateTime?
  completed Boolean @default(false)
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  projectId String? @db.ObjectId
  project Project? @relation(fields: [projectId],references: [id])
  contextId String[] @db.ObjectId
  contexts Context[] @relation(fields: [contextId],references: [id])
  category CategoryEnum
}

enum CategoryEnum {
  INBOX
  NEXT_ACTION
  WAITING_FOR
  SOMEDAY_MAYBE
  CALENDAR
  REFERENCE
  REVIEW
}

model Context {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  color String?
  userId String @db.ObjectId
  user User @relation(fields: [userId],references: [id])
  taskId String[] @db.ObjectId
  tasks Task[] @relation(fields: [taskId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
